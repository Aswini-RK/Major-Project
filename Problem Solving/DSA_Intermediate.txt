PYTHON INTERMEDIATE PROBLEMS IN ARRAY                                                                                           
_______________________________________________________________________________________________________________________

1. Program to cyclically rotate an array by one

def cyclicRotate(arr,n):
    if n ==0:
        return "The array is null"
    for i in reversed(range(n-1)):
        arr[i],arr[i-1]=arr[i-1],arr[i]
    return arr
        

arr=[1,2,3,4,5] 
n = len(arr)
print(cyclicRotate(arr,n))
o/p-> [5,1,2,3,4]
==========================================================================================================
2. Find the Missing Number

def missingNumber(arr,n):
    for i in range(1,n+1):
        if i not in arr:
            return i
            
arr=[1,2,3,5]
n = len(arr)
print(missingNumber(arr,n))
o/p -> 4
______________________________(or)______________________________________________
def findMissing(arr, N):
   
    # create a list of zeroes
    temp = [0] * (N+1) # [0,0,0,0,0]
 
    for i in range(0, N): #[1,1,1,0,1]
        temp[arr[i] - 1] = 1
 
    for i in range(0, N+1): 
        if(temp[i] == 0):
            ans = i + 1 # 3+1 = 4
 
    print(ans)
arr = [1, 2, 3, 5]
N = len(arr)
findMissing(arr, N)
o/p-> 4
================================================================================================================
3.Count pairs with given sum
def countPairs(arr,k,n):
    count=0
    for i in range(n):
        for j in range(i+1,n):
            if arr[i]+arr[j]==k:
                count+=1 
    return count 

arr=[1, 5, 7, -1]  
k =6
n = len(arr)
print("Pair with sum", k ,"is :",countPairs(arr,k,n))
o/p-> Pair with sum 6 is : 2
================================================================================================================
4. Rotate an array by K times to right side
def rotate(arr,start,end):
    while start<end:
        arr[start],arr[end]=arr[end],arr[start]
        start+=1 
        end-=1 
    return arr    

def rotateArray(arr,k):
    k=k%len(arr)
    rotate(arr,0,len(arr)-1)
    rotate(arr,0,k-1)
    rotate(arr,k,len(arr)-1)
    return arr 
print(rotateArray([1,2,3,4,5],3))    
o/p-> [5,4,3,1,2]
======================================================================================================================
5. Find duplicates in O(n) time and O(1) extra space
def findDuplicate(arr,n):
    arr1=[]
    for i in range(n):
        arr[arr[i]%n]+=n 
    for i in range(n):
        if arr[i]/n >= 2:
            arr1.append(i)       
    return arr1    

arr=[2,7,1,4,1,7,8,2,8]
n = len(arr)
print(findDuplicate(arr,n))
o/p-> [1,2,7,8]
=========================================================================================================================
6. Two Sum using hash table for O(n) time complexity and O(n) of space complexity

def two_sum(arr,target):
    num_available={}
    for i in range(len(arr)):
        needed_value=target-arr[i]
        if needed_value in num_available:
            return [i,num_available[needed_value]] # -1:1 here 1 is been accessed.
        else:
            num_available[arr[i]]=i 
    return []     
print(two_sum([2,-1,5,3],4))    
o/p-> [2,1]
===================================================================================================================================
7. To print the Sorted Array with Square.

def sortedArray(arr):
    newArr=[0]*len(arr) #[0,0,0,0]
    i =0
    j = len(arr)-1
    for k in reversed(range(len(arr))):
        sq_i=pow(arr[i],2)
        sq_j=pow(arr[j],2)
        if sq_i>sq_j:
            newArr[k]= sq_i
            i+=1
        else:
             newArr[k]= sq_j
             j-=1
            
    return newArr        
        
print(sortedArray([3,1,2,7]))
o/p-> [1,4,9,49]
========================================================================================================================================= 
8. Quick Sort
def pivot_element(arr,first,last):
    pivot=arr[first]
    left=first+1
    right=last 
    while True:
        while left<=right and arr[left]<=pivot:
            left+=1 
        while left<=right and arr[right]>=pivot:
            right-=1 
        if left>right:
            break
        else: #(when both while loop and if loop is unstatisfied)
            arr[left],arr[right]=arr[right],arr[left]
    # ( when left>right it break the pgm i.e it comes out of the fn and return this)        
    arr[first],arr[right]=arr[right],arr[first]      
    return right
def quickSort(arr,first,last):
    if first<last:
        p = pivot_element(arr,first,last) 
        quickSort(arr,first,p-1)
        quickSort(arr,p+1,last)
# Main        
arr=[56,26,93,17,31,44]
n=len(arr)
quickSort(arr,0,n-1)
print(arr)
o/p -> [17,26,31,44,56,93]
=======================================================================================================================================
9. To print common number in an three array 

arr1=[1,2,3,11]
arr2=[11,5,2]
arr3=[16,2,11]
print("The repeated numbers are : ",end = " ")
for i in range(len(arr1)):
    for j in range(len(arr2)):
        if arr1[i]==arr2[j]:
            for k in range(len(arr3)):
                if arr2[j]==arr3[k]:
                    print(arr3[k],end = " ")

o/p->The repeated numbers are: 20,80 

_________________________________________________________(or)_______________________________

def findCommon(ar1, ar2, ar3, n1, n2, n3):

	i, j, k = 0, 0, 0


	while (i < n1 and j < n2 and k < n3):

		if (ar1[i] == ar2[j] and ar2[j] == ar3[k]):
			print ar1[i],
			i += 1
			j += 1
			k += 1

		# x < y
		elif ar1[i] < ar2[j]:
			i += 1

		# y < z
		elif ar2[j] < ar3[k]:
			j += 1

		# We reach here when x > y and z < y, i.e., z is smallest
		else:
			k += 1

ar1 = [1, 5, 10, 20, 40, 80,12]
ar2 = [6, 7, 20, 80, 100]
ar3 = [3, 4, 15, 20, 30, 70, 80, 120]
n1 = len(ar1)
n2 = len(ar2)
n3 = len(ar3)
print "Common elements are",
findCommon(ar1, ar2, ar3, n1, n2, n3)
o/p->Common elements are 20,80 
================================================================================================================================
10.def firstRepeatElement(arr):
    for i in range(n):
        for j in range(i+1,n):
            if arr[i]==arr[j]:
                return arr[i],i
                break
           
arr=[10,5,3,4,3,5,6]
n = len(arr)
num = firstRepeatElement(arr)
print("The First Repeating Number along with its index is :",num)

o/p-> The First Repeating Number along with its index is : (5,1)
______________________________________(or)__________________________________________________________
Program to find first repeating element in arr[]

def printFirstRepeating(arr, n):
    myset = {}

    # Traverse the input array from right to left
      for i in range(n-1,-1,-1):

        # If element is already in hash set,
        # update Min
        if arr[i] in myset:
            Min= i

        else: # Else add element to hash set
            myset[arr[i]] = 1

    if (Min != -1):
        print("The first repeating element is",
                  arr[Min])
    else:
        print("There are no repeating elements")


arr = [10, 5, 3, 4, 3, 5, 6]
n = len(arr)
printFirstRepeating(arr, n)
o/p -> The first repeating element is 5
===============================================================================================================================
12. from collections import defaultdict
def firstNonRepeating(arr, n):
    mp = defaultdict(lambda: 0)
    for i in range(n):
        mp[arr[i]] += 1
    for i in range(n):
        if mp[arr[i]] == 1:
            return arr[i]
    return -1
 
arr = [9, 4, 9, 6, 7, 4]
n = len(arr)
print("The First NonRepeating is :",firstNonRepeating(arr, n))
o/p-> The First NonRepeating is :6
___________________________________________(or)____________________________________
def firstNonRepeating(arr, n):
    mp = {}
    for i in range(n):
        if arr[i] in mp:
            mp[arr[i]] += 1 
        else:
            mp[arr[i]] = 1 
            
    for i in range(n):
        if mp[arr[i]] == 1:
            return arr[i]
    return -1
 
arr = [9, 4, 9, 6, 7, 4]
n = len(arr)
print("The First NonRepeating is :",firstNonRepeating(arr, n))
o/p-> The First NonRepeating is :6
================================================================================================================================
13. def countSubarrWithEqualZeroAndOne(arr,n):
    sum=0
    count=0
    hash_table={} 
    for i in range(n):
        if arr[i]==0:
            arr[i]=-1
        sum+=arr[i]  
        if (sum==0):
            count+=1
        if (sum in hash_table):
            count+=hash_table[sum] 
        hash_table[sum] = hash_table.get(sum,0)+1 
            
    return count



arr= [1, 0, 0, 1, 1, 0, 0, 1]
n = len(arr)
print("The count of the total sub array is :",countSubarrWithEqualZeroAndOne(arr,n))
o/p-> The count of the total sub array is :12
======================================================================================================================================================
14.Rearrange array in alternating positive & negative items with O(1) extra space
def rearrange_alternating(arr):
    n = len(arr)
    for i in range(n):
        if(i%2==0and arr[i]>0) or(i%2!=0 and arr[i]<0):
            for j in range(i+1,n):
                if (i%2==0 and arr[j]<0) or(i%2!=0 and arr[j]>0):
                    arr[i],arr[j]=arr[j],arr[i]
                    break 
    return arr        
    

input_array = [-5,-2,5,2,4,7,1,8,0,-8 ]
result = rearrange_alternating(input_array)
print(result)
o/p-> [-5,5,-2,2,-8,7,1,8,0,4]
========================================================================================================================================================
15. #Find Last Digit Of a^b for Large Numbers (passed all testcases)
Expected Time Complexity: O(|b|)
Expected Auxiliary Space: O(1)

def findLastDigit(a,b):
    res=pow(int(a)%10,int(b),10)
    return res

a="32"
b="2"
print(findLastDigit(a,b))
o/p-> 4
==============================================================================================================================================================
16. Given a number N. Count the number of digits in N which evenly divide N. (passed all testcases)

Expected Time Complexity: O(log N)
Expected Space Complexity: O(1)
def evenlyDivides (N):
        temp=N 
        sum=0
        while temp!=0:
            num = temp%10
            if num!=0 and N%num==0:
                sum+=1 
            temp//=10
        return sum     
N=22074
o/p-> 2
================================================================================================================================================================
17. Given a number and its reverse. Find that number raised to the power of its own reverse. Note: As answers can be very large, print the result modulo 109 +7.

def power(self,N,R):
        res=pow(N,R)
        remainder=res%(pow(10,9)+7)
        return remainder 

------------------(or)---------------------------------------------
def power(self,N,R):
	p = pow(N,R,1000000007)
        return p 
o/p-> 4
=======================================================================================================================================================
18.GCD of a two number # Used Euclidean algorithm to iteratively find the greatest common divisor (GCD) of two numbers

Expected Time Complexity: O(log(min(A, B)))
Expected Auxiliary Space: O

def gcd(A, B):
        while B:
            A,B=B,A%B
        return A   

A=3
B=6
print(gcd(A,B))
o/p-> 3
=====================================================================================================================================================
19.Find prime number or not 

Expected Time Complexity: O(sqrt(N))
Expected Space Complexity: O(1)

def primeNumber(n):
    if n > 1:
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return 0 #Not a prime
        return 1 #It is a prime      
    else:
        return 0 #Not a prime



n=int(input("Enter a number: "))# 5 
print(primeNumber(n))
o/p-> 1 
======================================================================================================================================================
20. Check whether the number is Perfect Number or not. If yes return 1 else 0
Expected Time Complexity: O(sqrt(N))
Expected Auxiliary Space: O(1)

def isPerfectNumber(N):
    if N == 1:
        return 0
    sum = 0
    for i in range(1, int(N**0.5) + 1):
        if N % i == 0:
            if N / i != N:
                sum += i + (N / i)
            else:
                sum += i
    if sum == N:
        return 1
    else:
        return 0

N = 6
print(isPerfectNumber(N))
o/p-> 1
==========================================================================================================================================================
21. Third largest element
def thirdLargest(a, n):
        if n<3:
            return -1
        else:
            a.sort()
            return a[-3]
a=[12, 13, 1, 10, 34, 16]
o/p->13
=========================================================================================================================================================
21.Search an Element in an array Note:Element in an array  retrun index else return -1

def elementInArray(X,arr):
    for i in range(len(arr)):
        if X==arr[i]:
            return i 
    else:
        return -1


X=5
arr=[1,2,3,4,5]
print(elementInArray(X,arr))
o/p-> 4 (index value)
======================================================================================================================================================
23. Find missing number 

def elementInArray(n,arr):
    temp= [0] * n
    for i in range(n-1): #[1,1,1,0,1]
        temp[arr[i]-1]=1
    for i in range(n): 
        if temp[i]==0:
            return i+1 # 3 +1
        
n=5
arr=[1,2,3,5]
print(elementInArray(n,arr))
o/p-> 4
============================================================================================================================================
24. Sort 0's 1's and 2's 

def sort012(arr,n):
    l=0 
    m=0 
    h=n-1
    while m<=h:
        if arr[m]==0:
            arr[m],arr[l]=arr[l],arr[m] 
            m+=1
            l+=1
        elif arr[m]==1:
            m+=1
        elif arr[m]==2:
            arr[m],arr[h]=arr[h],arr[m] 
            h-=1
            
    return arr
arr=[0,2,1,2,0]
n=len(arr)
print(sort012(arr,n))
o/p-> [0,0,1,2,2]
========================================================================================================================================================
25. Check whether both the array has same element if so return 1 else return 0
def check(A,B):
    if len(A)!= len(B):
        return 0
    A.sort()
    B.sort()
    if A==B:
        return 1
    else:
        return 0




A=[1,2,5,4,0]
B=[2,4,5,0,1]
print(check(A,B))
o/p-> return 1
============================================================================================================================================================
26. ARRAY ROTATION TO LEFT BY K (array are moved to left expect the k element ):

def rotate(arr,start,end):
    while start<end:
            arr[start],arr[end]=arr[end],arr[start]
            start+=1 
            end-=1 
    return arr 
def leftRotate(arr, k, n):
    k=k%len(arr)
    rotate(arr,0,k-1)
    rotate(arr,k,n-1)
    rotate(arr,0,n-1)
    return arr

arr=[1,2,3,4,5,6,7] 
n=len(arr)
k=2
print(leftRotate(arr, k, n))
o/p-> [3,4,5,6,7,1,2]
-----------------------------------------------------------------------------------------------------

ARRAY ROTTAION TO RIGHT BY K (array are moved to right expect the k element ): 

def rotate(arr,start,end):
    while start<end:
            arr[start],arr[end]=arr[end],arr[start]
            start+=1 
            end-=1 
    return arr 
def leftRotate(arr, k, n):
    k=k%len(arr)
    rotate(arr,0,n-1)
    rotate(arr,0,k-1)
    rotate(arr,k,n-1)
    return arr

arr=[1,2,3,4,5,6,7] 
n=len(arr)
k=2
print(leftRotate(arr, k, n))
o/p-> [6,7,1,2,3,4,5]


-------------------------------------------------------------------------------------------------------------
BRUTE-FORCE METHOD FOR ARRAY ROTATION TO LEFT BY K  :

def rotateByElement(arr,n,k):
    num = k%n
    while num:
        for i in range(n-1):
            arr[i],arr[i+1]=arr[i+1],arr[i]
        num-=1    
    return arr    
        

arr=[1,2,3,4,5,6,7] 
n=len(arr)
k=2
print(rotateByElement(arr,n,k))
o/p-> [3,4,5,6,7,1,2]
=====================================================================================================================================================
27.Array Subset of another array
def isSubset( a1, a2, n, m):
    if len(a1)<len(a2):
        return "No"
    else:
        for i in a2:
            if (i not in a1) or (a1.count(i) < a2.count(i)):
                subset="N"
                break
            else:
                subset="Y"
    if subset=='Y':
        return "Yes"
    else:
        return "No"
 
a1=[11, 7, 1, 13, 21, 3, 7, 3]
a2=[11, 89, 7, 1, 7]
n=len(a1)
m=len(a2)
print(isSubset( a1, a2, n, m))
=========================================================================================================================================================
28. Find the frequencies of a number in a array of 1 to N
def frequencyCount(arr, N, P):
        arr2 =arr.copy()
        for i in arr2:
            if i<=N:
                arr[i - 1] += 1
        for i in range(N):
            arr[i]=arr[i]-arr2[i]
        return arr 
arr=[2,3,2,3,5]
N=5
P=5
print(frequencyCount(arr, N, P))
o/p->[0,2,2,0,1]
=========================================================================================================================================================
29.def hasArrayTwoCandidates(arr, n, x):
    new_set = set()
    for i in range(n):
        target = x - arr[i]
        if target in new_set:
            return True
        new_set.add(arr[i])
    return False

arr = [1, 4, 45, 6, 10, 8]
n = 5
x = 16
print(hasArrayTwoCandidates(arr, n, x))
o/p-> True
===================================================================================================================================================
30. 3 sum

def find3Numbers(A, n, X):
        # Your Code Here
        count=0
        for i in range(n):
            for j in range(i+1,n):
                for k in range(j+1,n):
                    if A[i]+A[j]+A[k]==X:
                        return 1
        return count
n = 4
X = 6
A= [3,2,2,3]
print(find3Numbers(A, n, X))
o/p-> 0
==================================================================================================================================================
31. 3 sum
def find3Numbers(A, n, X):
    res = []
    A.sort()
    for i in range(n-2):
        if i > 0 and A[i] == A[i-1]:
            continue
        left = i + 1
        right = n - 1
        while left < right:
            if A[i] + A[left] + A[right] == X:
                res.append([A[i], A[left], A[right]])
                left += 1
                right -= 1
                # Skip duplicates
                while left < right and A[left] == A[left - 1]:
                    left += 1
                while left < right and A[right] == A[right + 1]:
                    right -= 1
            elif A[i] + A[left] + A[right] < X:
                left += 1
		while left < right and A[left] == A[left - 1]:
                    left += 1
            else:
                right -= 1
		while left < right and A[right] == A[right + 1]:
                    right -= 1
    return res

A = [1, 2, 1, 3, 1, 4]
n = len(A)
X = 7
print(find3Numbers(A, n, X))
======================================================================================================================================================
32. 4 sums

def findFourElements(arr, n, X):

	# Store summs of all pairs in a hash table
	mp = {}
	for i in range(n - 1):
		for j in range(i + 1, n):
			mp[arr[i] + arr[j]] = [i, j]

	# Traverse through all pairs and search
	# for X - (current pair summ).
	for i in range(n - 1):
		for j in range(i + 1, n):
			summ = arr[i] + arr[j]

			# If X - summ is present in hash table,
			if (X - summ) in mp:

				# Making sure that all elements are
				# distinct array elements and an element
				# is not considered more than once.
				p = mp[X - summ]
				if (p[0] != i and p[0] != j and p[1] != i and p[1] != j):
					print(arr[i], ", ", arr[j], ", ",
						arr[p[0]], ", ", arr[p[1]], sep="")
					return


# Driver code
arr = [10, 20, 30, 40, 1, 2]
n = len(arr)
X = 91

# Function call
findFourElements(arr, n, X)

o/p-> [20,30,40,1]
=========================================================================================================================================================
33. Intersection of an Array

def NumberofElementsInIntersection(self,a, b, n, m):
        count = 0
        set_a = set(a)
        counted = set()  
        for i in range(m):
            if b[i] in set_a and b[i] not in counted:
                count += 1
                counted.add(b[i])  # Mark the element as counted
        return count 

n = 6
m = 6
a = [1, 2, 3, 4, 5, 6]
b = [3, 4, 5,5, 6, 7] 
print(intersectionArray(a,b,n,m))
o/p-> 4
------------------------------------------------------------(or)-------------------------------------------
def intersectionArray(a,b,n,m):
    count=0
    res={}
    dup=[]
    for i in range(n):
        if a[i] not in res:
            res[a[i]]=i 
    for i in range(m):
        if b[i] in res and b[i] not in dup:
            count+=1  
            dup.append(b[i])
    return count      


n = 6
m = 6
a = [1, 2, 3, 4, 5, 6]
b = [3, 4, 5,5, 6, 7] 
print(intersectionArray(a,b,n,m))
o/p-> 4
===========================================================================================================================================
34. Union 

def doUnion(a,n,b,m):
    set_a=set(a)
    set_b=set(b)
    union=set_a.union(set_b) 
    res=len(union)
    return res
        
        
a=[85,25,1,32,54,6,6]
b=[85,85,2,2,2,2]
n=len(a)
m=len(b)
print(doUnion(a,n,b,m))
o/p-> 7 
_____________________________________(and)______________________________
def doUnion(a,n,b,m):
    set_a=set(a)
    set_b=set(b)
    union=set_a.union(set_b)
    return union
        
        
            
        
a=[85,25,1,32,54,6,6]
b=[85,85,2,2,2,2]
n=len(a)
m=len(b)
uni=doUnion(a,n,b,m) 
for i in uni:
    print(i,end=" ")
o/p->32 1 2 85 6 54 25
=================================================================================================================================================
35. Remove the duplicates and return the count of non duplicate in an array.

def removeDuplicates(A,N):
    i = 0
    j = 1
    while j < len(A):
        if A[i] == A[j]:
            A.remove(A[i])
        elif A[i]<A[j]:
            i = i + 1
            j = j + 1
    return len(A)

A=[1,2,2,4]
N=4
print(removeDuplicates(A,N))
o/p-> 3
================================================================================================================================================ 
36. find Kth position in sorted array.

def kthElement(arr1, arr2, n, m, k):
    arr3 = arr1+arr2 
    arr3.sort()
    for i in range(1,len(arr3)+1):
        res=arr3[i] 
        k-=1 
        if k<=1:
            break
    return res    
            


arr1 = [100, 112, 256, 349, 770]
arr2= [72, 86, 113, 119, 265, 445, 892]
k = 7
n,m=len(arr1),len(arr2) 
print(kthElement(arr1, arr2, n, m, k)) 
o/p 256
============================================================================================================================= 
37. The most repeated element in an array which is the element count is greater than n/2
def mostRepeatedElement(A, n):
    res = n / 2
    count = 1
    majority_element = None
    for i in range(n - 1):
        count = 1  # Reset count for each new element
        for j in range(i + 1, n):
            if A[i] == A[j]:
                count += 1 
        if count > res:
            majority_element = A[i] 
            break# No need to continue if the majority element is found
    return majority_element
A = [1, 3, 2, 5, 4, 4, 4, 4, 4]
n = len(A)
print("The most repeated element is:",mostRepeatedElement(A, n)) 
o/p-> The most repeated element is :4
========================================================================================================================================================
38. Recurssion 

def fibo(n):
    if n<=1:
        return n
    else:
        return fibo(n-1)+fibo(n-2) 


n = 3
print(fibo(n))
o/p-> 2
=====================================================================================================================================================



























            








            










    











    

    







