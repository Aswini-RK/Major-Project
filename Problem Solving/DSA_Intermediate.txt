PYTHON INTERMEDIATE PROBLEMS IN ARRAY                                                                                           
_______________________________________________________________________________________________________________________

1. Program to cyclically rotate an array by one

def cyclicRotate(arr,n):
    if n ==0:
        return "The array is null"
    for i in reversed(range(n-1)):
        arr[i],arr[i-1]=arr[i-1],arr[i]
    return arr
        

arr=[1,2,3,4,5] 
n = len(arr)
print(cyclicRotate(arr,n))
o/p-> [5,1,2,3,4]
==========================================================================================================
2. Find the Missing Number

def missingNumber(arr,n):
    for i in range(1,n+1):
        if i not in arr:
            return i
            
arr=[1,2,3,5]
n = len(arr)
print(missingNumber(arr,n))
o/p -> 4
______________________________(or)______________________________________________
def findMissing(arr, N):
   
    # create a list of zeroes
    temp = [0] * (N+1) # [0,0,0,0,0]
 
    for i in range(0, N): #[1,1,1,0,1]
        temp[arr[i] - 1] = 1
 
    for i in range(0, N+1): 
        if(temp[i] == 0):
            ans = i + 1 # 3+1 = 4
 
    print(ans)
arr = [1, 2, 3, 5]
N = len(arr)
findMissing(arr, N)
o/p-> 4
================================================================================================================
3.Count pairs with given sum
def countPairs(arr,k,n):
    count=0
    for i in range(n):
        for j in range(i+1,n):
            if arr[i]+arr[j]==k:
                count+=1 
    return count 

arr=[1, 5, 7, -1]  
k =6
n = len(arr)
print("Pair with sum", k ,"is :",countPairs(arr,k,n))
o/p-> Pair with sum 6 is : 2
================================================================================================================
4. Rotate an array by K times to right side
def rotate(arr,start,end):
    while start<end:
        arr[start],arr[end]=arr[end],arr[start]
        start+=1 
        end-=1 
    return arr    

def rotateArray(arr,k):
    k=k%len(arr)
    rotate(arr,0,len(arr)-1)
    rotate(arr,0,k-1)
    rotate(arr,k,len(arr)-1)
    return arr 
print(rotateArray([1,2,3,4,5],3))    
o/p-> [5,4,3,1,2]
======================================================================================================================
5. Find duplicates in O(n) time and O(1) extra space
def findDuplicate(arr,n):
    arr1=[]
    for i in range(n):
        arr[arr[i]%n]+=n 
    for i in range(n):
        if arr[i]/n >= 2:
            arr1.append(i)       
    return arr1    

arr=[2,7,1,4,1,7,8,2,8]
n = len(arr)
print(findDuplicate(arr,n))
o/p-> [1,2,7,8]
=========================================================================================================================
6. Two Sum using hash table for O(n) time complexity and O(n) of space complexity

def two_sum(arr,target):
    num_available={}
    for i in range(len(arr)):
        needed_value=target-arr[i]
        if needed_value in num_available:
            return [i,num_available[needed_value]] # -1:1 here 1 is been accessed.
        else:
            num_available[arr[i]]=i 
    return []     
print(two_sum([2,-1,5,3],4))    
o/p-> [2,1]
===================================================================================================================================
7. To print the Sorted Array with Square.

def sortedArray(arr):
    newArr=[0]*len(arr) #[0,0,0,0]
    i =0
    j = len(arr)-1
    for k in reversed(range(len(arr))):
        sq_i=pow(arr[i],2)
        sq_j=pow(arr[j],2)
        if sq_i>sq_j:
            newArr[k]= sq_i
            i+=1
        else:
             newArr[k]= sq_j
             j-=1
            
    return newArr        
        
print(sortedArray([3,1,2,7]))
o/p-> [1,4,9,49]
========================================================================================================================================= 
8. Quick Sort
def pivot_element(arr,first,last):
    pivot=arr[first]
    left=first+1
    right=last 
    while True:
        while left<=right and arr[left]<=pivot:
            left+=1 
        while left<=right and arr[right]>=pivot:
            right-=1 
        if left>right:
            break
        else: #(when both while loop and if loop is unstatisfied)
            arr[left],arr[right]=arr[right],arr[left]
    # ( when left>right it break the pgm i.e it comes out of the fn and return this)        
    arr[first],arr[right]=arr[right],arr[first]      
    return right
def quickSort(arr,first,last):
    if first<last:
        p = pivot_element(arr,first,last) 
        quickSort(arr,first,p-1)
        quickSort(arr,p+1,last)
        
        
        
        
# Main        
arr=[56,26,93,17,31,44]
n=len(arr)
quickSort(arr,0,n-1)
print(arr)
=======================================================================================================================================
